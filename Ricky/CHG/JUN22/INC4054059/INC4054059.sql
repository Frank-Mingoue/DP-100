Print 'Rename Column dbo.WC_SALES_0_DEL_F.INTEGRATION_ID to INTEGRATION_ID2'

IF NOT EXISTS (
		SELECT 1
		FROM INFORMATION_SCHEMA.COLUMNS
		WHERE TABLE_NAME = 'WC_SALES_0_DEL_F'
			AND COLUMN_NAME = 'INTEGRATION_ID2'
		)
BEGIN	
		EXEC sp_rename 'dbo.WC_SALES_0_DEL_F.INTEGRATION_ID', 'INTEGRATION_ID2', 'COLUMN';
		ALTER TABLE WC_SALES_0_DEL_F ALTER COLUMN INTEGRATION_ID2 NVARCHAR(32)
END
	GO

-------------------------------------------------------------------------------------------------------------------------------
-------------------------------------------------------------------------------------------------------------------------------

Print 'Create sp_Delete_SalesData_Zero'

IF  EXISTS (SELECT * FROM sys.procedures WHERE object_id = OBJECT_ID(N'[dbo].[sp_Delete_SalesData_Zero]'))
DROP PROCEDURE [dbo].[sp_Delete_SalesData_Zero]
GO 

CREATE PROCEDURE [dbo].[sp_Delete_SalesData_Zero](@AGGREGATE NVARCHAR(30))
AS
BEGIN
/*******************************************************************************

Latest Version #3.0
Name: sp_Delete_SalesData_Zero
Execution: JTI_SalesData_Zero_Deletion from Custom
Description: The stored procedure will perform Sales data Zero deletion in aggregate tables

Version #3.0
Release Date:June 2022
Summary: replace INTEGRATION_ID by INTEGRATION_ID2 
Process ID:INC4054059
Development Team:TME-DATA-INTERFACE
Author:Frank Mingoué

Version #2.0
Release Date:July 2018
Summary: Use ABS function in the criteria to retrieve records to be deleted.
Process ID:INC2102590
Development Team:TME-DATA-INTERFACE
Author:Santanoo Ramjug

Version #1.0
Release Date:July 2016
Process ID:CHG088220
Development Team:TME-DATA-INTERFACE
Author:Riteswaree Seewooruttun

*********************************************************************************/

DECLARE @ETL_PROC_WID AS NUMERIC(10),
 ---- Logging parameters
    @OBJECT_TYPE      NVARCHAR(30),
    @PROCESS_OBJECTS  NVARCHAR(30),
    @PROCESS_TASKS    NVARCHAR(30),  
    @PROCESS_DESCRIPTION NVARCHAR(150),
    @DEBUG_VALUE      NVARCHAR(150),
    @TASK_STATUS      NVARCHAR(30),
	@ROW_CNT          NVARCHAR(30),
	@ERROR_COD        NVARCHAR(10),
	@ROW_CNT1		  INT, 
	@ROW_COUNT2		  INT, 
	@getStartDate	  DATETIME, 
	@getEndDate		  DATETIME,
	@COUNTRY_CODE NVARCHAR(30),
	@ROW_COUNT		  NUMERIC(10,0), 
  	@NO_OF_RECORDS	  NUMERIC(10,0),
  	@NO_OF_LOOP		  NUMERIC(10,0),
	@SALES_TYPE		  NVARCHAR(30),
	@ACTIVE_FLG 	  NCHAR(1),
	@TARGET_TABLE		 NVARCHAR(MAX),
	@DEL nvarchar (MAX),
	@QUERY nvarchar (MAX)

	----Process Execution log entry -> Start of process
	SELECT @ETL_PROC_WID     = MAX(ETL_PROC_WID) FROM W_PARAM_G (NOLOCK)
		SET @OBJECT_TYPE = 'STORED_PROCEDURE';
		SET @PROCESS_OBJECTS = 'sp_Delete_SalesData_Zero';
		SET @ETL_PROC_WID = @ETL_PROC_WID;
		SET @getStartDate = GETDATE();
		SET @ROW_CNT1 = 0;
		SET @PROCESS_TASKS       = 'START :PROCESS SALES DATA ZERO DELETION';
		SET @PROCESS_DESCRIPTION = 'Starting Sales Data Zero Deletion process';

		EXEC INSERT_WC_PROCESS_EXECUTION_LOG @OBJECT_TYPE        ,
											 @PROCESS_OBJECTS    ,
											 @PROCESS_TASKS      ,
											 @PROCESS_DESCRIPTION,
											 '1 : START',
                             				 'STARTED',
                             				  @COUNTRY_CODE,
											  @ETL_PROC_WID ;
	
	--Verify for entry in parameter table

	IF NOT EXISTS (SELECT 1 FROM WC_BATCH_EXEC_PARAM WHERE ETL_PROCESS_NAME ='Sales Data Zero Deletion')
	BEGIN
		INSERT INTO WC_BATCH_EXEC_PARAM VALUES ('Sales Data Zero Deletion', 1000000)
	END
	
	--Get commit frequency

	SELECT @ROW_COUNT =  COMMIT_FREQ FROM WC_BATCH_EXEC_PARAM WHERE ETL_PROCESS_NAME ='Sales Data Zero Deletion'

	--Verify for active entry for Sales Type to be impacted by the deletion

	DECLARE SALESTYPE_CURSOR CURSOR FOR 
	SELECT COUNTRY_CODE,SALES_TYPE
	FROM WC_SALES_0_PARAM
	WHERE ACTIVE_FLG='Y'

	OPEN SALESTYPE_CURSOR

	FETCH NEXT FROM SALESTYPE_CURSOR INTO @COUNTRY_CODE, @SALES_TYPE

	WHILE @@FETCH_STATUS=0
	
	BEGIN
	--loop per Aggregate
	
	IF @AGGREGATE = 'FA'

		BEGIN

			--Truncate Staging table
			TRUNCATE TABLE WC_SALES_0_DEL_F

			--Define target table

			SET @TARGET_TABLE = N'dbo.WC_SALES_F_'+@COUNTRY_CODE

			
			--Populate Staging table for Fact SD Zero Deletion
			
			SET @QUERY = 
				'INSERT INTO WC_SALES_0_DEL_F WITH (TABLOCK) 
					(INTEGRATION_ID2
					, MONTH_WID) 
					SELECT TOP '+CAST(@ROW_COUNT AS NVARCHAR(10))+'
					F.INTEGRATION_ID2,
					F.MONTH_WID 
					FROM '+@TARGET_TABLE+' F WITH (NOLOCK) 
					LEFT OUTER JOIN WC_SALES_0_DEL_F ON WC_SALES_0_DEL_F.INTEGRATION_ID2 =F.INTEGRATION_ID2
					WHERE 
					((ISNULL(ABS(ACTL_SHIPMENT_QTY_C),0))+(ISNULL(ABS(ACTL_SHIPMENT_QTY),0))+(ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT),0))+(ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT_USD),0))+(ISNULL(ABS(ACTL_NET_SHIPMENT_AMT),0))+(ISNULL(ABS(ACTL_NET_SHIPMENT_AMT_USD),0))+(ISNULL(ABS(GROSS_MARGIN),0))+(ISNULL(ABS(GROSS_MARGIN_USD),0))+(ISNULL(ABS(NET_MARGIN),0))+(ISNULL(ABS(NET_MARGIN_USD),0))+(ISNULL(ABS(PRODUCT_MARGIN),0))+(ISNULL(ABS(PRODUCT_MARGIN_USD),0))+(ISNULL(ABS(MARKET_EXPENDITURE),0))+(ISNULL(ABS(MARKET_EXPENDITURE_USD),0))+(ISNULL(ABS(SALES_EXPENDITURE),0))+(ISNULL(ABS(SALES_EXPENDITURE_USD),0))+(ISNULL(ABS(CONTRIBUTION),0))+(ISNULL(ABS(CONTRIBUTION_USD),0))+(ISNULL(ABS(OPERATING_PROFIT),0))+(ISNULL(ABS(OPERATING_PROFIT_USD),0))+(ISNULL(ABS(TAX_AMOUNT),0))+(ISNULL(ABS(TAX_AMOUNT_USD),0))+(ISNULL(ABS(PROM_MAT_QTY),0))+(ISNULL(ABS(SALES_DISCOUNT),0))+(ISNULL(ABS(CUSTOMER_ORIENTED_DISCOUNT),0))+(ISNULL(ABS(MANUFACTURER_COGS),0))+(ISNULL(ABS(MANUFACTURER_COGS_USD),0))+(ISNULL(ABS(MANUFACTURER_PRICE),0))+(ISNULL(ABS(MANUFACTURER_PRICE_USD),0))+(ISNULL(ABS(MANUFACTURER_TAX),0))+(ISNULL(ABS(MANUFACTURER_TAX_USD),0))+(ISNULL(ABS(MANUFACTURER_GROSS_MARGIN),0))+(ISNULL(ABS(MANUFACTURER_GROSS_MARGIN_USD),0))+(ISNULL(ABS(WHOLESALER_PRICE),0))+(ISNULL(ABS(WHOLESALER_PRICE_USD),0))+(ISNULL(ABS(WHOLESALER_TAX),0))+(ISNULL(ABS(WHOLESALER_TAX_USD),0))+(ISNULL(ABS(WHOLESALER_GROSS_MARGIN),0))+(ISNULL(ABS(WHOLESALER_GROSS_MARGIN_USD),0))+(ISNULL(ABS(INTERMED1_PRICE),0))+(ISNULL(ABS(INTERMED1_PRICE_USD),0))+(ISNULL(ABS(INTERMED1_TAX),0))+(ISNULL(ABS(INTERMED1_TAX_USD),0))+(ISNULL(ABS(INTERMED1_GROSS_MARGIN),0))+(ISNULL(ABS(INTERMED1_GROSS_MARGIN_USD),0))+(ISNULL(ABS(INTERMED2_PRICE),0))+(ISNULL(ABS(INTERMED2_PRICE_USD),0))+(ISNULL(ABS(INTERMED2_TAX),0))+(ISNULL(ABS(INTERMED2_TAX_USD),0))+(ISNULL(ABS(INTERMED2_GROSS_MARGIN),0))+(ISNULL(ABS(INTERMED2_GROSS_MARGIN_USD),0))+(ISNULL(ABS(INTERMED3_PRICE),0))+(ISNULL(ABS(INTERMED3_PRICE_USD),0))+(ISNULL(ABS(INTERMED3_TAX),0))+(ISNULL(ABS(INTERMED3_TAX_USD),0))+(ISNULL(ABS(INTERMED3_GROSS_MARGIN),0))+(ISNULL(ABS(INTERMED3_GROSS_MARGIN_USD),0))+(ISNULL(ABS(RETAILER_SELLIN_PRICE),0))+(ISNULL(ABS(RETAILER_SELLIN_PRICE_USD),0))+(ISNULL(ABS(RETAILER_PRICE),0))+(ISNULL(ABS(RETAILER_PRICE_USD),0))+(ISNULL(ABS(RETAILER_TAX),0))+(ISNULL(ABS(RETAILER_TAX_USD),0))+(ISNULL(ABS(RETAILER_GROSS_MARGIN),0))+(ISNULL(ABS(RETAILER_GROSS_MARGIN_USD),0))+(ISNULL(ABS(X_STANDARD_COST),0))+(ISNULL(ABS(X_STANDARD_COST_USD),0))+(ISNULL(ABS(X_DISTRIBUTION_COST),0))+(ISNULL(ABS(X_DISTRIBUTION_COST_USD),0))+(ISNULL(ABS(X_OTHER_COSTS_OF_GOODS),0))+(ISNULL(ABS(X_OTHER_COSTS_OF_GOODS_USD),0))+(ISNULL(ABS(CUSTOM_SALES_FIGURES_1),0))+(ISNULL(ABS(CUSTOM_SALES_FIGURES_2),0))+(ISNULL(ABS(CUSTOM_SALES_FIGURES_3),0))+(ISNULL(ABS(X_DELIVERED_QTY),0))+(ISNULL(ABS(X_DELIVERED_PACK),0)) = 0) 
					AND SALES_TYPE_DESC = '''+@SALES_TYPE+'''
					AND COUNTRY_CODE = '''+@COUNTRY_CODE+'''
					AND WC_SALES_0_DEL_F.INTEGRATION_ID2 IS NULL'
					
			print @QUERY;

			SET ROWCOUNT 1000000	
			
					EXEC sp_executesql @QUERY
				   
					WHILE @@ROWCOUNT = 1000000	
				
						BEGIN
						EXEC sp_executesql @QUERY
						END
			
			SET ROWCOUNT 0	

		
			SELECT 	@ROW_COUNT2 = COUNT(1) FROM WC_SALES_0_DEL_F 		
						
			--Process Execution log entry -> Staging table populated

			SELECT @ETL_PROC_WID     = MAX(ETL_PROC_WID) FROM W_PARAM_G (NOLOCK)
			SET @OBJECT_TYPE = 'STORED_PROCEDURE';
			SET @PROCESS_OBJECTS = 'sp_Delete_SalesData_Zero';
			SET @ETL_PROC_WID = @ETL_PROC_WID;
			SET @getStartDate = GETDATE();
			SET @ROW_CNT1 = 0;
			SET @PROCESS_TASKS       = 'Staging table: WC_SALES_0_DEL_F';
			SET @PROCESS_DESCRIPTION = 'WC_SALES_0_DEL_F table has been populated with: '+CAST (@ROW_COUNT2 AS NVARCHAR (10))+' records';

			EXEC INSERT_WC_PROCESS_EXECUTION_LOG @OBJECT_TYPE        ,
											 @PROCESS_OBJECTS    ,
											 @PROCESS_TASKS      ,
											 @PROCESS_DESCRIPTION,
											 '2 : Staging table populated',
                             				 'STARTED',
                             				  @COUNTRY_CODE,
											  @ETL_PROC_WID ;


			--Sales Data Zero Deletion from Fact table
			SET @DEL = 'DELETE FROM '+@TARGET_TABLE+'
						WHERE EXISTS (SELECT 1 
						FROM WC_SALES_0_DEL_F 
						WHERE WC_SALES_0_DEL_F.INTEGRATION_ID2 = '+@TARGET_TABLE+'.INTEGRATION_ID2)'

			SET ROWCOUNT 1000000	
			
				EXEC sp_executesql @DEL
				   
				WHILE @@ROWCOUNT = 1000000	
				
					BEGIN
						EXEC sp_executesql @DEL
					END
			
			SET ROWCOUNT 0	
			
			--Process Execution log entry -> Deletion Performed

			SELECT @ETL_PROC_WID     = MAX(ETL_PROC_WID) FROM W_PARAM_G (NOLOCK)
			SET @OBJECT_TYPE = 'STORED_PROCEDURE';
			SET @PROCESS_OBJECTS = 'sp_Delete_SalesData_Zero';
			SET @ETL_PROC_WID = @ETL_PROC_WID;
			SET @getStartDate = GETDATE();
			SET @ROW_CNT1 = 0;
			SET @PROCESS_TASKS       = 'Delete Sales Data Fact table';
			SET @PROCESS_DESCRIPTION = 'DELETE '+@TARGET_TABLE+' TABLE FOR SALES_TYPE: '+ @SALES_TYPE +' AND COUNTRY_CODE: '+@COUNTRY_CODE+''; 

			EXEC INSERT_WC_PROCESS_EXECUTION_LOG @OBJECT_TYPE        ,
											 @PROCESS_OBJECTS    ,
											 @PROCESS_TASKS      ,
											 @PROCESS_DESCRIPTION,
											 '3: Perform Sales Data Zero Deletion',
                             				 'END',
                             				  @COUNTRY_CODE,
											  @ETL_PROC_WID ;	

											  
			FETCH NEXT FROM SALESTYPE_CURSOR INTO @COUNTRY_CODE, @SALES_TYPE


	END --END IF
	ELSE
	

		IF @AGGREGATE = 'MA'

			BEGIN

				--Truncate Staging table

				TRUNCATE TABLE WC_SALES_MA_0_DEL_F

				--Define target table

				SET @TARGET_TABLE = N'dbo.WC_SALES_M_A_'+@COUNTRY_CODE


				--Populate Staging table for MA SD Zero Deletion
			

				SET ROWCOUNT 1000000	

			EXEC ('INSERT INTO WC_SALES_MA_0_DEL_F WITH (TABLOCK)
					(ROW_WID,
					SALES_TYPE_WID,
					MONTH_WID ) 
					SELECT 
					M.ROW_WID,
					M.SALES_TYPE_WID,
					M.MONTH_WID 
					FROM  '+@TARGET_TABLE+' M 
					LEFT OUTER JOIN WC_SALES_MA_0_DEL_F ON WC_SALES_MA_0_DEL_F.ROW_WID =M.ROW_WID
					WHERE (ISNULL(ABS(ACTL_SHIPMENT_QTY_C),0)+ISNULL(ABS(ACTL_SHIPMENT_QTY),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT_USD),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT_USD),0)+ISNULL(ABS(GROSS_MARGIN),0)+ISNULL(ABS(GROSS_MARGIN_USD),0)+ISNULL(ABS(NET_MARGIN),0)+ISNULL(ABS(NET_MARGIN_USD),0)+ISNULL(ABS(PRODUCT_MARGIN),0)+ISNULL(ABS(PRODUCT_MARGIN_USD),0)+ISNULL(ABS(MARKET_EXPENDITURE),0)+ISNULL(ABS(MARKET_EXPENDITURE_USD),0)+ISNULL(ABS(SALES_EXPENDITURE),0)+ISNULL(ABS(SALES_EXPENDITURE_USD),0)+ISNULL(ABS(CONTRIBUTION),0)+ISNULL(ABS(CONTRIBUTION_USD),0)+ISNULL(ABS(OPERATING_PROFIT),0)+ISNULL(ABS(OPERATING_PROFIT_USD),0)+ISNULL(ABS(TAX_AMOUNT),0)+ISNULL(ABS(TAX_AMOUNT_USD),0)+ISNULL(ABS(PROM_MAT_QTY),0)+ISNULL(ABS(SALES_DISCOUNT),0)+ISNULL(ABS(CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(MANUFACTURER_COGS),0)+ISNULL(ABS(MANUFACTURER_COGS_USD),0)+ISNULL(ABS(MANUFACTURER_PRICE),0)+ISNULL(ABS(MANUFACTURER_PRICE_USD),0)+ISNULL(ABS(MANUFACTURER_TAX),0)+ISNULL(ABS(MANUFACTURER_TAX_USD),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN_USD),0)+ISNULL(ABS(WHOLESALER_PRICE),0)+ISNULL(ABS(WHOLESALER_PRICE_USD),0)+ISNULL(ABS(WHOLESALER_TAX),0)+ISNULL(ABS(WHOLESALER_TAX_USD),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED1_PRICE),0)+ISNULL(ABS(INTERMED1_PRICE_USD),0)+ISNULL(ABS(INTERMED1_TAX),0)+ISNULL(ABS(INTERMED1_TAX_USD),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED2_PRICE),0)+ISNULL(ABS(INTERMED2_PRICE_USD),0)+ISNULL(ABS(INTERMED2_TAX),0)+ISNULL(ABS(INTERMED2_TAX_USD),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED3_PRICE),0)+ISNULL(ABS(INTERMED3_PRICE_USD),0)+ISNULL(ABS(INTERMED3_TAX),0)+ISNULL(ABS(INTERMED3_TAX_USD),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN_USD),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE_USD),0)+ISNULL(ABS(RETAILER_PRICE),0)+ISNULL(ABS(RETAILER_PRICE_USD),0)+ISNULL(ABS(RETAILER_TAX),0)+ISNULL(ABS(RETAILER_TAX_USD),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN_USD),0)+ISNULL(ABS(X_STANDARD_COST),0)+ISNULL(ABS(X_STANDARD_COST_USD),0)+ISNULL(ABS(X_DISTRIBUTION_COST),0)+ISNULL(ABS(X_DISTRIBUTION_COST_USD),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS_USD),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_1),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_2),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_3),0)+ISNULL(ABS(X_DELIVERED_QTY),0)+ISNULL(ABS(X_DELIVERED_PACK),0) = 0) 
					AND SALES_TYPE_DESC ='''+@SALES_TYPE+'''
					AND COUNTRY_CODE = '''+@COUNTRY_CODE+'''
					AND WC_SALES_MA_0_DEL_F.ROW_WID IS NULL')


					WHILE @@ROWCOUNT = 1000000	
				
						BEGIN
						EXEC('INSERT INTO WC_SALES_MA_0_DEL_F WITH (TABLOCK)
						(ROW_WID,
						SALES_TYPE_WID,
						MONTH_WID ) 
						SELECT 
						M.ROW_WID,
						M.SALES_TYPE_WID,
						M.MONTH_WID 
						FROM '+@TARGET_TABLE+' M  
						LEFT OUTER JOIN WC_SALES_MA_0_DEL_F ON WC_SALES_MA_0_DEL_F.ROW_WID =M.ROW_WID
						WHERE (ISNULL(ABS(ACTL_SHIPMENT_QTY_C),0)+ISNULL(ABS(ACTL_SHIPMENT_QTY),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT_USD),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT_USD),0)+ISNULL(ABS(GROSS_MARGIN),0)+ISNULL(ABS(GROSS_MARGIN_USD),0)+ISNULL(ABS(NET_MARGIN),0)+ISNULL(ABS(NET_MARGIN_USD),0)+ISNULL(ABS(PRODUCT_MARGIN),0)+ISNULL(ABS(PRODUCT_MARGIN_USD),0)+ISNULL(ABS(MARKET_EXPENDITURE),0)+ISNULL(ABS(MARKET_EXPENDITURE_USD),0)+ISNULL(ABS(SALES_EXPENDITURE),0)+ISNULL(ABS(SALES_EXPENDITURE_USD),0)+ISNULL(ABS(CONTRIBUTION),0)+ISNULL(ABS(CONTRIBUTION_USD),0)+ISNULL(ABS(OPERATING_PROFIT),0)+ISNULL(ABS(OPERATING_PROFIT_USD),0)+ISNULL(ABS(TAX_AMOUNT),0)+ISNULL(ABS(TAX_AMOUNT_USD),0)+ISNULL(ABS(PROM_MAT_QTY),0)+ISNULL(ABS(SALES_DISCOUNT),0)+ISNULL(ABS(CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(MANUFACTURER_COGS),0)+ISNULL(ABS(MANUFACTURER_COGS_USD),0)+ISNULL(ABS(MANUFACTURER_PRICE),0)+ISNULL(ABS(MANUFACTURER_PRICE_USD),0)+ISNULL(ABS(MANUFACTURER_TAX),0)+ISNULL(ABS(MANUFACTURER_TAX_USD),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN_USD),0)+ISNULL(ABS(WHOLESALER_PRICE),0)+ISNULL(ABS(WHOLESALER_PRICE_USD),0)+ISNULL(ABS(WHOLESALER_TAX),0)+ISNULL(ABS(WHOLESALER_TAX_USD),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED1_PRICE),0)+ISNULL(ABS(INTERMED1_PRICE_USD),0)+ISNULL(ABS(INTERMED1_TAX),0)+ISNULL(ABS(INTERMED1_TAX_USD),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED2_PRICE),0)+ISNULL(ABS(INTERMED2_PRICE_USD),0)+ISNULL(ABS(INTERMED2_TAX),0)+ISNULL(ABS(INTERMED2_TAX_USD),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED3_PRICE),0)+ISNULL(ABS(INTERMED3_PRICE_USD),0)+ISNULL(ABS(INTERMED3_TAX),0)+ISNULL(ABS(INTERMED3_TAX_USD),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN_USD),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE_USD),0)+ISNULL(ABS(RETAILER_PRICE),0)+ISNULL(ABS(RETAILER_PRICE_USD),0)+ISNULL(ABS(RETAILER_TAX),0)+ISNULL(ABS(RETAILER_TAX_USD),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN_USD),0)+ISNULL(ABS(X_STANDARD_COST),0)+ISNULL(ABS(X_STANDARD_COST_USD),0)+ISNULL(ABS(X_DISTRIBUTION_COST),0)+ISNULL(ABS(X_DISTRIBUTION_COST_USD),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS_USD),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_1),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_2),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_3),0)+ISNULL(ABS(X_DELIVERED_QTY),0)+ISNULL(ABS(X_DELIVERED_PACK),0) = 0) 
						AND SALES_TYPE_DESC = '''+@SALES_TYPE+'''
						AND COUNTRY_CODE = '''+@COUNTRY_CODE+'''
						AND WC_SALES_MA_0_DEL_F.ROW_WID IS NULL')

						END
			
				SET ROWCOUNT 0	
					

				SELECT 	@ROW_COUNT2 = COUNT(1) FROM WC_SALES_MA_0_DEL_F 		

					
				--Process Execution log entry -> Staging table populated

				SELECT @ETL_PROC_WID     = MAX(ETL_PROC_WID) FROM W_PARAM_G (NOLOCK)
				SET @OBJECT_TYPE = 'STORED_PROCEDURE';
				SET @PROCESS_OBJECTS = 'sp_Delete_SalesData_Zero';
				SET @ETL_PROC_WID = @ETL_PROC_WID;
				SET @getStartDate = GETDATE();
				SET @ROW_CNT1 = 0;
				SET @PROCESS_TASKS       = 'Staging table: WC_SALES_MA_0_DEL_F';
				SET @PROCESS_DESCRIPTION = 'WC_SALES_MA_0_DEL_F table has been populated with: '+CAST (@ROW_COUNT2 AS NVARCHAR (10))+' records';

				EXEC INSERT_WC_PROCESS_EXECUTION_LOG @OBJECT_TYPE        ,
											 @PROCESS_OBJECTS    ,
											 @PROCESS_TASKS      ,
											 @PROCESS_DESCRIPTION,
											 '2 : Staging table populated',
                             				 'STARTED',
                             				  @COUNTRY_CODE,
											  @ETL_PROC_WID ;

				--Sales Data Zero Deletion from MA table
				SET @DEL = 'DELETE FROM '+@TARGET_TABLE+'
							WHERE EXISTS (SELECT 1 FROM WC_SALES_MA_0_DEL_F 
							WHERE WC_SALES_MA_0_DEL_F.ROW_WID = '+@TARGET_TABLE+'.ROW_WID AND 
							WC_SALES_MA_0_DEL_F.SALES_TYPE_WID = '+@TARGET_TABLE+'.SALES_TYPE_WID)'

				SET ROWCOUNT 1000000	
					EXEC sp_executesql @DEL
				   
					WHILE @@ROWCOUNT = 1000000	
						BEGIN
							EXEC sp_executesql @DEL
						END
				SET ROWCOUNT 0											  


				--Process Execution log entry -> Deletion Performed

				SELECT @ETL_PROC_WID     = MAX(ETL_PROC_WID) FROM W_PARAM_G (NOLOCK)
				SET @OBJECT_TYPE = 'STORED_PROCEDURE';
				SET @PROCESS_OBJECTS = 'sp_Delete_SalesData_Zero';
				SET @ETL_PROC_WID = @ETL_PROC_WID;
				SET @getStartDate = GETDATE();
				SET @ROW_CNT1 = 0;
				SET @PROCESS_TASKS       = 'Delete Sales Data MA Aggregate table';
				SET @PROCESS_DESCRIPTION = 'DELETE '+@TARGET_TABLE+' TABLE FOR SALES_TYPE: '+ @SALES_TYPE +' AND COUNTRY_CODE: '+@COUNTRY_CODE+''; 

				EXEC INSERT_WC_PROCESS_EXECUTION_LOG @OBJECT_TYPE        ,
											 @PROCESS_OBJECTS    ,
											 @PROCESS_TASKS      ,
											 @PROCESS_DESCRIPTION,
											 '3: Perform Sales Data Zero Deletion',
                             				 'END',
                             				  @COUNTRY_CODE,
											  @ETL_PROC_WID ;

											  
FETCH NEXT FROM SALESTYPE_CURSOR INTO @COUNTRY_CODE, @SALES_TYPE

		END --END IF
		
			ELSE
	

		IF @AGGREGATE = 'BA'

			BEGIN

				--Truncate Staging table
				TRUNCATE TABLE WC_SALES_BA_0_DEL_F

				--Define target table
				SET @TARGET_TABLE = N'dbo.WC_SALES_M_A_BRAND_'+@COUNTRY_CODE


				--Populate Staging table for BRAND SD Zero Deletion
				SET ROWCOUNT 1000000	

			EXEC ('INSERT INTO WC_SALES_BA_0_DEL_F WITH (TABLOCK)
					(ROW_WID,
					SALES_TYPE_WID,
					MONTH_WID ) 
					SELECT 
					M.ROW_WID,
					M.SALES_TYPE_WID,
					M.MONTH_WID 
					FROM  '+@TARGET_TABLE+' M 
					LEFT OUTER JOIN WC_SALES_BA_0_DEL_F ON WC_SALES_BA_0_DEL_F.ROW_WID =M.ROW_WID
					WHERE (ISNULL(ABS(ACTL_SHIPMENT_QTY_C),0)+ISNULL(ABS(ACTL_SHIPMENT_QTY),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT_USD),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT_USD),0)+ISNULL(ABS(GROSS_MARGIN),0)+ISNULL(ABS(GROSS_MARGIN_USD),0)+ISNULL(ABS(NET_MARGIN),0)+ISNULL(ABS(NET_MARGIN_USD),0)+ISNULL(ABS(PRODUCT_MARGIN),0)+ISNULL(ABS(PRODUCT_MARGIN_USD),0)+ISNULL(ABS(MARKET_EXPENDITURE),0)+ISNULL(ABS(MARKET_EXPENDITURE_USD),0)+ISNULL(ABS(SALES_EXPENDITURE),0)+ISNULL(ABS(SALES_EXPENDITURE_USD),0)+ISNULL(ABS(CONTRIBUTION),0)+ISNULL(ABS(CONTRIBUTION_USD),0)+ISNULL(ABS(OPERATING_PROFIT),0)+ISNULL(ABS(OPERATING_PROFIT_USD),0)+ISNULL(ABS(TAX_AMOUNT),0)+ISNULL(ABS(TAX_AMOUNT_USD),0)+ISNULL(ABS(PROM_MAT_QTY),0)+ISNULL(ABS(YTD_ACTL_SHIPMENT_QTY_C),0)+ISNULL(ABS(YTD_ACTL_SHIPMENT_QTY),0)+ISNULL(ABS(YTD_ACTL_GROSS_SHIPMENT_AMT),0)+ISNULL(ABS(YTD_ACTL_GROSS_SHIPMENT_AMT_USD),0)+ISNULL(ABS(YTD_ACTL_NET_SHIPMENT_AMT),0)+ISNULL(ABS(YTD_ACTL_NET_SHIPMENT_AMT_USD),0)+ISNULL(ABS(YTD_GROSS_MARGIN),0)+ISNULL(ABS(YTD_GROSS_MARGIN_USD),0)+ISNULL(ABS(YTD_NET_MARGIN),0)+ISNULL(ABS(YTD_NET_MARGIN_USD),0)+ISNULL(ABS(YTD_PRODUCT_MARGIN),0)+ISNULL(ABS(YTD_PRODUCT_MARGIN_USD),0)+ISNULL(ABS(YTD_MARKET_EXPENDITURE),0)+ISNULL(ABS(YTD_MARKET_EXPENDITURE_USD),0)+ISNULL(ABS(YTD_SALES_EXPENDITURE),0)+ISNULL(ABS(YTD_SALES_EXPENDITURE_USD),0)+ISNULL(ABS(YTD_CONTRIBUTION),0)+ISNULL(ABS(YTD_CONTRIBUTION_USD),0)+ISNULL(ABS(YTD_OPERATING_PROFIT),0)+ISNULL(ABS(YTD_OPERATING_PROFIT_USD),0)+ISNULL(ABS(YTD_TAX_AMOUNT),0)+ISNULL(ABS(YTD_TAX_AMOUNT_USD),0)+ISNULL(ABS(YTD_PROM_MAT_QTY),0)+ISNULL(ABS(SALES_DISCOUNT),0)+ISNULL(ABS(CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(YTD_SALES_DISCOUNT),0)+ISNULL(ABS(YTD_CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(MAT_SALES_DISCOUNT),0)+ISNULL(ABS(MAT_CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(GROSS_SALES),0)+ISNULL(ABS(GROSS_SALES_USD),0)+ISNULL(ABS(NET_SALES),0)+ISNULL(ABS(NET_SALES_USD),0)+ISNULL(ABS(MANUFACTURER_COGS),0)+ISNULL(ABS(MANUFACTURER_COGS_USD),0)+ISNULL(ABS(MANUFACTURER_PRICE),0)+ISNULL(ABS(MANUFACTURER_PRICE_USD),0)+ISNULL(ABS(MANUFACTURER_TAX),0)+ISNULL(ABS(MANUFACTURER_TAX_USD),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN_USD),0)+ISNULL(ABS(WHOLESALER_PRICE),0)+ISNULL(ABS(WHOLESALER_PRICE_USD),0)+ISNULL(ABS(WHOLESALER_TAX),0)+ISNULL(ABS(WHOLESALER_TAX_USD),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED1_PRICE),0)+ISNULL(ABS(INTERMED1_PRICE_USD),0)+ISNULL(ABS(INTERMED1_TAX),0)+ISNULL(ABS(INTERMED1_TAX_USD),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED2_PRICE),0)+ISNULL(ABS(INTERMED2_PRICE_USD),0)+ISNULL(ABS(INTERMED2_TAX),0)+ISNULL(ABS(INTERMED2_TAX_USD),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED3_PRICE),0)+ISNULL(ABS(INTERMED3_PRICE_USD),0)+ISNULL(ABS(INTERMED3_TAX),0)+ISNULL(ABS(INTERMED3_TAX_USD),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN_USD),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE_USD),0)+ISNULL(ABS(RETAILER_PRICE),0)+ISNULL(ABS(RETAILER_PRICE_USD),0)+ISNULL(ABS(RETAILER_TAX),0)+ISNULL(ABS(RETAILER_TAX_USD),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN_USD),0)+ISNULL(ABS(X_STANDARD_COST),0)+ISNULL(ABS(X_STANDARD_COST_USD),0)+ISNULL(ABS(X_DISTRIBUTION_COST),0)+ISNULL(ABS(X_DISTRIBUTION_COST_USD),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS_USD),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_1),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_2),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_3),0)+ISNULL(ABS(YTD_CUSTOM_SALES_FIGURES_1),0)+ISNULL(ABS(YTD_CUSTOM_SALES_FIGURES_2),0)+ISNULL(ABS(YTD_CUSTOM_SALES_FIGURES_3),0)+ISNULL(ABS(X_DELIVERED_QTY),0)+ISNULL(ABS(X_DELIVERED_PACK),0)+ISNULL(ABS(YTD_X_DELIVERED_QTY),0)+ISNULL(ABS(YTD_X_DELIVERED_PACK),0)+ISNULL(ABS(GROSS_MARGIN_CONF),0)+ISNULL(ABS(NET_MARGIN_CONF),0)+ISNULL(ABS(PRODUCT_MARGIN_CONF),0)+ISNULL(ABS(CONTRIBUTION_CONF),0)+ISNULL(ABS(OPERATING_PROFIT_CONF),0)+ISNULL(ABS(GROSS_MARGIN_USD_CONF),0)+ISNULL(ABS(NET_MARGIN_USD_CONF),0)+ISNULL(ABS(PRODUCT_MARGIN_USD_CONF),0)+ISNULL(ABS(CONTRIBUTION_USD_CONF),0)+ISNULL(ABS(OPERATING_PROFIT_USD_CONF),0)+ISNULL(ABS(YTD_GROSS_MARGIN_CONF),0)+ISNULL(ABS(YTD_NET_MARGIN_CONF),0)+ISNULL(ABS(YTD_PRODUCT_MARGIN_CONF),0)+ISNULL(ABS(YTD_CONTRIBUTION_CONF),0)+ISNULL(ABS(YTD_OPERATING_PROFIT_CONF),0)+ISNULL(ABS(YTD_GROSS_MARGIN_USD_CONF),0)+ISNULL(ABS(YTD_NET_MARGIN_USD_CONF),0)+ISNULL(ABS(YTD_PRODUCT_MARGIN_USD_CONF),0)+ISNULL(ABS(YTD_CONTRIBUTION_USD_CONF),0)+ISNULL(ABS(YTD_OPERATING_PROFIT_USD_CONF),0) =0 ) 
					AND SALES_TYPE_DESC ='''+@SALES_TYPE+'''
					AND COUNTRY_CODE = '''+@COUNTRY_CODE+'''
					AND WC_SALES_BA_0_DEL_F.ROW_WID IS NULL')

					WHILE @@ROWCOUNT = 1000000	
				
						BEGIN
						EXEC('INSERT INTO WC_SALES_BA_0_DEL_F WITH (TABLOCK)
						(ROW_WID,
						SALES_TYPE_WID,
						MONTH_WID ) 
						SELECT 
						M.ROW_WID,
						M.SALES_TYPE_WID,
						M.MONTH_WID 
						FROM '+@TARGET_TABLE+' M  
						LEFT OUTER JOIN WC_SALES_BA_0_DEL_F ON WC_SALES_BA_0_DEL_F.ROW_WID =M.ROW_WID
						WHERE (ISNULL(ABS(ACTL_SHIPMENT_QTY_C),0)+ISNULL(ABS(ACTL_SHIPMENT_QTY),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT_USD),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT_USD),0)+ISNULL(ABS(GROSS_MARGIN),0)+ISNULL(ABS(GROSS_MARGIN_USD),0)+ISNULL(ABS(NET_MARGIN),0)+ISNULL(ABS(NET_MARGIN_USD),0)+ISNULL(ABS(PRODUCT_MARGIN),0)+ISNULL(ABS(PRODUCT_MARGIN_USD),0)+ISNULL(ABS(MARKET_EXPENDITURE),0)+ISNULL(ABS(MARKET_EXPENDITURE_USD),0)+ISNULL(ABS(SALES_EXPENDITURE),0)+ISNULL(ABS(SALES_EXPENDITURE_USD),0)+ISNULL(ABS(CONTRIBUTION),0)+ISNULL(ABS(CONTRIBUTION_USD),0)+ISNULL(ABS(OPERATING_PROFIT),0)+ISNULL(ABS(OPERATING_PROFIT_USD),0)+ISNULL(ABS(TAX_AMOUNT),0)+ISNULL(ABS(TAX_AMOUNT_USD),0)+ISNULL(ABS(PROM_MAT_QTY),0)+ISNULL(ABS(YTD_ACTL_SHIPMENT_QTY_C),0)+ISNULL(ABS(YTD_ACTL_SHIPMENT_QTY),0)+ISNULL(ABS(YTD_ACTL_GROSS_SHIPMENT_AMT),0)+ISNULL(ABS(YTD_ACTL_GROSS_SHIPMENT_AMT_USD),0)+ISNULL(ABS(YTD_ACTL_NET_SHIPMENT_AMT),0)+ISNULL(ABS(YTD_ACTL_NET_SHIPMENT_AMT_USD),0)+ISNULL(ABS(YTD_GROSS_MARGIN),0)+ISNULL(ABS(YTD_GROSS_MARGIN_USD),0)+ISNULL(ABS(YTD_NET_MARGIN),0)+ISNULL(ABS(YTD_NET_MARGIN_USD),0)+ISNULL(ABS(YTD_PRODUCT_MARGIN),0)+ISNULL(ABS(YTD_PRODUCT_MARGIN_USD),0)+ISNULL(ABS(YTD_MARKET_EXPENDITURE),0)+ISNULL(ABS(YTD_MARKET_EXPENDITURE_USD),0)+ISNULL(ABS(YTD_SALES_EXPENDITURE),0)+ISNULL(ABS(YTD_SALES_EXPENDITURE_USD),0)+ISNULL(ABS(YTD_CONTRIBUTION),0)+ISNULL(ABS(YTD_CONTRIBUTION_USD),0)+ISNULL(ABS(YTD_OPERATING_PROFIT),0)+ISNULL(ABS(YTD_OPERATING_PROFIT_USD),0)+ISNULL(ABS(YTD_TAX_AMOUNT),0)+ISNULL(ABS(YTD_TAX_AMOUNT_USD),0)+ISNULL(ABS(YTD_PROM_MAT_QTY),0)+ISNULL(ABS(SALES_DISCOUNT),0)+ISNULL(ABS(CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(YTD_SALES_DISCOUNT),0)+ISNULL(ABS(YTD_CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(MAT_SALES_DISCOUNT),0)+ISNULL(ABS(MAT_CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(GROSS_SALES),0)+ISNULL(ABS(GROSS_SALES_USD),0)+ISNULL(ABS(NET_SALES),0)+ISNULL(ABS(NET_SALES_USD),0)+ISNULL(ABS(MANUFACTURER_COGS),0)+ISNULL(ABS(MANUFACTURER_COGS_USD),0)+ISNULL(ABS(MANUFACTURER_PRICE),0)+ISNULL(ABS(MANUFACTURER_PRICE_USD),0)+ISNULL(ABS(MANUFACTURER_TAX),0)+ISNULL(ABS(MANUFACTURER_TAX_USD),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN_USD),0)+ISNULL(ABS(WHOLESALER_PRICE),0)+ISNULL(ABS(WHOLESALER_PRICE_USD),0)+ISNULL(ABS(WHOLESALER_TAX),0)+ISNULL(ABS(WHOLESALER_TAX_USD),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED1_PRICE),0)+ISNULL(ABS(INTERMED1_PRICE_USD),0)+ISNULL(ABS(INTERMED1_TAX),0)+ISNULL(ABS(INTERMED1_TAX_USD),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED2_PRICE),0)+ISNULL(ABS(INTERMED2_PRICE_USD),0)+ISNULL(ABS(INTERMED2_TAX),0)+ISNULL(ABS(INTERMED2_TAX_USD),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED3_PRICE),0)+ISNULL(ABS(INTERMED3_PRICE_USD),0)+ISNULL(ABS(INTERMED3_TAX),0)+ISNULL(ABS(INTERMED3_TAX_USD),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN_USD),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE_USD),0)+ISNULL(ABS(RETAILER_PRICE),0)+ISNULL(ABS(RETAILER_PRICE_USD),0)+ISNULL(ABS(RETAILER_TAX),0)+ISNULL(ABS(RETAILER_TAX_USD),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN_USD),0)+ISNULL(ABS(X_STANDARD_COST),0)+ISNULL(ABS(X_STANDARD_COST_USD),0)+ISNULL(ABS(X_DISTRIBUTION_COST),0)+ISNULL(ABS(X_DISTRIBUTION_COST_USD),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS_USD),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_1),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_2),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_3),0)+ISNULL(ABS(YTD_CUSTOM_SALES_FIGURES_1),0)+ISNULL(ABS(YTD_CUSTOM_SALES_FIGURES_2),0)+ISNULL(ABS(YTD_CUSTOM_SALES_FIGURES_3),0)+ISNULL(ABS(X_DELIVERED_QTY),0)+ISNULL(ABS(X_DELIVERED_PACK),0)+ISNULL(ABS(YTD_X_DELIVERED_QTY),0)+ISNULL(ABS(YTD_X_DELIVERED_PACK),0)+ISNULL(ABS(GROSS_MARGIN_CONF),0)+ISNULL(ABS(NET_MARGIN_CONF),0)+ISNULL(ABS(PRODUCT_MARGIN_CONF),0)+ISNULL(ABS(CONTRIBUTION_CONF),0)+ISNULL(ABS(OPERATING_PROFIT_CONF),0)+ISNULL(ABS(GROSS_MARGIN_USD_CONF),0)+ISNULL(ABS(NET_MARGIN_USD_CONF),0)+ISNULL(ABS(PRODUCT_MARGIN_USD_CONF),0)+ISNULL(ABS(CONTRIBUTION_USD_CONF),0)+ISNULL(ABS(OPERATING_PROFIT_USD_CONF),0)+ISNULL(ABS(YTD_GROSS_MARGIN_CONF),0)+ISNULL(ABS(YTD_NET_MARGIN_CONF),0)+ISNULL(ABS(YTD_PRODUCT_MARGIN_CONF),0)+ISNULL(ABS(YTD_CONTRIBUTION_CONF),0)+ISNULL(ABS(YTD_OPERATING_PROFIT_CONF),0)+ISNULL(ABS(YTD_GROSS_MARGIN_USD_CONF),0)+ISNULL(ABS(YTD_NET_MARGIN_USD_CONF),0)+ISNULL(ABS(YTD_PRODUCT_MARGIN_USD_CONF),0)+ISNULL(ABS(YTD_CONTRIBUTION_USD_CONF),0)+ISNULL(ABS(YTD_OPERATING_PROFIT_USD_CONF),0) =0 )
						AND SALES_TYPE_DESC = '''+@SALES_TYPE+'''
						AND COUNTRY_CODE = '''+@COUNTRY_CODE+'''
						AND WC_SALES_BA_0_DEL_F.ROW_WID IS NULL')

						END
			
				SET ROWCOUNT 0	

				SELECT 	@ROW_COUNT2 = COUNT(1) FROM WC_SALES_BA_0_DEL_F 		

				--Process Execution log entry -> Staging table populated

				SELECT @ETL_PROC_WID     = MAX(ETL_PROC_WID) FROM W_PARAM_G (NOLOCK)
				SET @OBJECT_TYPE = 'STORED_PROCEDURE';
				SET @PROCESS_OBJECTS = 'sp_Delete_SalesData_Zero';
				SET @ETL_PROC_WID = @ETL_PROC_WID;
				SET @getStartDate = GETDATE();
				SET @ROW_CNT1 = 0;
				SET @PROCESS_TASKS       = 'Staging table: WC_SALES_BA_0_DEL_F';
				SET @PROCESS_DESCRIPTION = 'WC_SALES_BA_0_DEL_F table has been populated with: '+CAST (@ROW_COUNT2 AS NVARCHAR (10))+' records';

				EXEC INSERT_WC_PROCESS_EXECUTION_LOG @OBJECT_TYPE        ,
											 @PROCESS_OBJECTS    ,
											 @PROCESS_TASKS      ,
											 @PROCESS_DESCRIPTION,
											 '2 : Staging table populated',
                             				 'STARTED',
                             				  @COUNTRY_CODE,
											  @ETL_PROC_WID ;

				--Sales Data Zero Deletion from Brand table
				SET @DEL = 'DELETE FROM '+@TARGET_TABLE+'
							WHERE EXISTS (SELECT 1 FROM WC_SALES_BA_0_DEL_F 
							WHERE WC_SALES_BA_0_DEL_F.ROW_WID = '+@TARGET_TABLE+'.ROW_WID AND 
							WC_SALES_BA_0_DEL_F.SALES_TYPE_WID = '+@TARGET_TABLE+'.SALES_TYPE_WID)'

				SET ROWCOUNT 1000000	
					EXEC sp_executesql @DEL
				   
					WHILE @@ROWCOUNT =  1000000	
						BEGIN
							EXEC sp_executesql @DEL
						END
				SET ROWCOUNT 0											  


				--Process Execution log entry -> Deletion Performed

				SELECT @ETL_PROC_WID     = MAX(ETL_PROC_WID) FROM W_PARAM_G (NOLOCK)
				SET @OBJECT_TYPE = 'STORED_PROCEDURE';
				SET @PROCESS_OBJECTS = 'sp_Delete_SalesData_Zero';
				SET @ETL_PROC_WID = @ETL_PROC_WID;
				SET @getStartDate = GETDATE();
				SET @ROW_CNT1 = 0;
				SET @PROCESS_TASKS       = 'Delete Sales Data Brand Aggregate table';
				SET @PROCESS_DESCRIPTION = 'DELETE '+@TARGET_TABLE+' TABLE FOR SALES_TYPE: '+ @SALES_TYPE +' AND COUNTRY_CODE: '+@COUNTRY_CODE+''; 

				EXEC INSERT_WC_PROCESS_EXECUTION_LOG @OBJECT_TYPE        ,
											 @PROCESS_OBJECTS    ,
											 @PROCESS_TASKS      ,
											 @PROCESS_DESCRIPTION,
											 '3: Perform Sales Data Zero Deletion',
                             				 'END',
                             				  @COUNTRY_CODE,
											  @ETL_PROC_WID ;

											  
FETCH NEXT FROM SALESTYPE_CURSOR INTO @COUNTRY_CODE, @SALES_TYPE

		END --END IF
					ELSE
	

		IF @AGGREGATE = 'YA'

			BEGIN
				--Truncate Staging table
				TRUNCATE TABLE WC_SALES_YA_0_DEL_F

				--Define target table
				SET @TARGET_TABLE = N'dbo.WC_SALES_Y_A_'+@COUNTRY_CODE

				--Populate Staging table for BRAND SD Zero Deletion
				SET ROWCOUNT 1000000	

			EXEC ('INSERT INTO WC_SALES_YA_0_DEL_F WITH (TABLOCK)
					(ROW_WID,
					SALES_TYPE_WID ) 
					SELECT 
					M.ROW_WID,
					M.SALES_TYPE_WID
					FROM  '+@TARGET_TABLE+' M 
					LEFT OUTER JOIN WC_SALES_YA_0_DEL_F ON WC_SALES_YA_0_DEL_F.ROW_WID =M.ROW_WID
					WHERE ISNULL(ABS(ACTL_SHIPMENT_QTY_C),0)+ISNULL(ABS(ACTL_SHIPMENT_QTY),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT_USD),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT_USD),0)+ISNULL(ABS(GROSS_MARGIN),0)+ISNULL(ABS(GROSS_MARGIN_USD),0)+ISNULL(ABS(NET_MARGIN),0)+ISNULL(ABS(NET_MARGIN_USD),0)+ISNULL(ABS(PRODUCT_MARGIN),0)+ISNULL(ABS(PRODUCT_MARGIN_USD),0)+ISNULL(ABS(MARKET_EXPENDITURE),0)+ISNULL(ABS(MARKET_EXPENDITURE_USD),0)+ISNULL(ABS(SALES_EXPENDITURE),0)+ISNULL(ABS(SALES_EXPENDITURE_USD),0)+ISNULL(ABS(CONTRIBUTION),0)+ISNULL(ABS(CONTRIBUTION_USD),0)+ISNULL(ABS(OPERATING_PROFIT),0)+ISNULL(ABS(OPERATING_PROFIT_USD),0)+ISNULL(ABS(TAX_AMOUNT),0)+ISNULL(ABS(TAX_AMOUNT_USD),0)+ISNULL(ABS(PROM_MAT_QTY),0)+ISNULL(ABS(SALES_DISCOUNT),0)+ISNULL(ABS(CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(MANUFACTURER_COGS),0)+ISNULL(ABS(MANUFACTURER_COGS_USD),0)+ISNULL(ABS(MANUFACTURER_PRICE),0)+ISNULL(ABS(MANUFACTURER_PRICE_USD),0)+ISNULL(ABS(MANUFACTURER_TAX),0)+ISNULL(ABS(MANUFACTURER_TAX_USD),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN_USD),0)+ISNULL(ABS(WHOLESALER_PRICE),0)+ISNULL(ABS(WHOLESALER_PRICE_USD),0)+ISNULL(ABS(WHOLESALER_TAX),0)+ISNULL(ABS(WHOLESALER_TAX_USD),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED1_PRICE),0)+ISNULL(ABS(INTERMED1_PRICE_USD),0)+ISNULL(ABS(INTERMED1_TAX),0)+ISNULL(ABS(INTERMED1_TAX_USD),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED2_PRICE),0)+ISNULL(ABS(INTERMED2_PRICE_USD),0)+ISNULL(ABS(INTERMED2_TAX),0)+ISNULL(ABS(INTERMED2_TAX_USD),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED3_PRICE),0)+ISNULL(ABS(INTERMED3_PRICE_USD),0)+ISNULL(ABS(INTERMED3_TAX),0)+ISNULL(ABS(INTERMED3_TAX_USD),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN_USD),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE_USD),0)+ISNULL(ABS(RETAILER_PRICE),0)+ISNULL(ABS(RETAILER_PRICE_USD),0)+ISNULL(ABS(RETAILER_TAX),0)+ISNULL(ABS(RETAILER_TAX_USD),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN_USD),0)+ISNULL(ABS(X_STANDARD_COST),0)+ISNULL(ABS(X_STANDARD_COST_USD),0)+ISNULL(ABS(X_DISTRIBUTION_COST),0)+ISNULL(ABS(X_DISTRIBUTION_COST_USD),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS_USD),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_1),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_2),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_3),0)+ISNULL(ABS(X_DELIVERED_QTY),0)+ISNULL(ABS(X_DELIVERED_PACK),0)+ISNULL(ABS(GROSS_MARGIN_CONF),0)+ISNULL(ABS(NET_MARGIN_CONF),0)+ISNULL(ABS(PRODUCT_MARGIN_CONF),0)+ISNULL(ABS(CONTRIBUTION_CONF),0)+ISNULL(ABS(OPERATING_PROFIT_CONF),0)+ISNULL(ABS(GROSS_MARGIN_USD_CONF),0)+ISNULL(ABS(NET_MARGIN_USD_CONF),0)+ISNULL(ABS(PRODUCT_MARGIN_USD_CONF),0)+ISNULL(ABS(CONTRIBUTION_USD_CONF),0)+ISNULL(ABS(OPERATING_PROFIT_USD_CONF),0) = 0
					AND SALES_TYPE_DESC ='''+@SALES_TYPE+'''
					AND COUNTRY_CODE = '''+@COUNTRY_CODE+'''
					AND WC_SALES_YA_0_DEL_F.ROW_WID IS NULL')

					WHILE @@ROWCOUNT = 1000000	
				
						BEGIN
						EXEC('INSERT INTO WC_SALES_YA_0_DEL_F WITH (TABLOCK)
						(ROW_WID,
						SALES_TYPE_WID ) 
						SELECT 
						M.ROW_WID,
						M.SALES_TYPE_WID 
						FROM '+@TARGET_TABLE+' M  
						LEFT OUTER JOIN WC_SALES_YA_0_DEL_F ON WC_SALES_YA_0_DEL_F.ROW_WID =M.ROW_WID
						WHERE ISNULL(ABS(ACTL_SHIPMENT_QTY_C),0)+ISNULL(ABS(ACTL_SHIPMENT_QTY),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_GROSS_SHIPMENT_AMT_USD),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT),0)+ISNULL(ABS(ACTL_NET_SHIPMENT_AMT_USD),0)+ISNULL(ABS(GROSS_MARGIN),0)+ISNULL(ABS(GROSS_MARGIN_USD),0)+ISNULL(ABS(NET_MARGIN),0)+ISNULL(ABS(NET_MARGIN_USD),0)+ISNULL(ABS(PRODUCT_MARGIN),0)+ISNULL(ABS(PRODUCT_MARGIN_USD),0)+ISNULL(ABS(MARKET_EXPENDITURE),0)+ISNULL(ABS(MARKET_EXPENDITURE_USD),0)+ISNULL(ABS(SALES_EXPENDITURE),0)+ISNULL(ABS(SALES_EXPENDITURE_USD),0)+ISNULL(ABS(CONTRIBUTION),0)+ISNULL(ABS(CONTRIBUTION_USD),0)+ISNULL(ABS(OPERATING_PROFIT),0)+ISNULL(ABS(OPERATING_PROFIT_USD),0)+ISNULL(ABS(TAX_AMOUNT),0)+ISNULL(ABS(TAX_AMOUNT_USD),0)+ISNULL(ABS(PROM_MAT_QTY),0)+ISNULL(ABS(SALES_DISCOUNT),0)+ISNULL(ABS(CUSTOMER_ORIENTED_DISCOUNT),0)+ISNULL(ABS(MANUFACTURER_COGS),0)+ISNULL(ABS(MANUFACTURER_COGS_USD),0)+ISNULL(ABS(MANUFACTURER_PRICE),0)+ISNULL(ABS(MANUFACTURER_PRICE_USD),0)+ISNULL(ABS(MANUFACTURER_TAX),0)+ISNULL(ABS(MANUFACTURER_TAX_USD),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN),0)+ISNULL(ABS(MANUFACTURER_GROSS_MARGIN_USD),0)+ISNULL(ABS(WHOLESALER_PRICE),0)+ISNULL(ABS(WHOLESALER_PRICE_USD),0)+ISNULL(ABS(WHOLESALER_TAX),0)+ISNULL(ABS(WHOLESALER_TAX_USD),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN),0)+ISNULL(ABS(WHOLESALER_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED1_PRICE),0)+ISNULL(ABS(INTERMED1_PRICE_USD),0)+ISNULL(ABS(INTERMED1_TAX),0)+ISNULL(ABS(INTERMED1_TAX_USD),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED1_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED2_PRICE),0)+ISNULL(ABS(INTERMED2_PRICE_USD),0)+ISNULL(ABS(INTERMED2_TAX),0)+ISNULL(ABS(INTERMED2_TAX_USD),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED2_GROSS_MARGIN_USD),0)+ISNULL(ABS(INTERMED3_PRICE),0)+ISNULL(ABS(INTERMED3_PRICE_USD),0)+ISNULL(ABS(INTERMED3_TAX),0)+ISNULL(ABS(INTERMED3_TAX_USD),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN),0)+ISNULL(ABS(INTERMED3_GROSS_MARGIN_USD),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE),0)+ISNULL(ABS(RETAILER_SELLIN_PRICE_USD),0)+ISNULL(ABS(RETAILER_PRICE),0)+ISNULL(ABS(RETAILER_PRICE_USD),0)+ISNULL(ABS(RETAILER_TAX),0)+ISNULL(ABS(RETAILER_TAX_USD),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN),0)+ISNULL(ABS(RETAILER_GROSS_MARGIN_USD),0)+ISNULL(ABS(X_STANDARD_COST),0)+ISNULL(ABS(X_STANDARD_COST_USD),0)+ISNULL(ABS(X_DISTRIBUTION_COST),0)+ISNULL(ABS(X_DISTRIBUTION_COST_USD),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS),0)+ISNULL(ABS(X_OTHER_COSTS_OF_GOODS_USD),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_1),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_2),0)+ISNULL(ABS(CUSTOM_SALES_FIGURES_3),0)+ISNULL(ABS(X_DELIVERED_QTY),0)+ISNULL(ABS(X_DELIVERED_PACK),0)+ISNULL(ABS(GROSS_MARGIN_CONF),0)+ISNULL(ABS(NET_MARGIN_CONF),0)+ISNULL(ABS(PRODUCT_MARGIN_CONF),0)+ISNULL(ABS(CONTRIBUTION_CONF),0)+ISNULL(ABS(OPERATING_PROFIT_CONF),0)+ISNULL(ABS(GROSS_MARGIN_USD_CONF),0)+ISNULL(ABS(NET_MARGIN_USD_CONF),0)+ISNULL(ABS(PRODUCT_MARGIN_USD_CONF),0)+ISNULL(ABS(CONTRIBUTION_USD_CONF),0)+ISNULL(ABS(OPERATING_PROFIT_USD_CONF),0) = 0
						AND SALES_TYPE_DESC = '''+@SALES_TYPE+'''
						AND COUNTRY_CODE = '''+@COUNTRY_CODE+'''
						AND WC_SALES_YA_0_DEL_F.ROW_WID IS NULL')

						END
			
				SET ROWCOUNT 0	
					
				SELECT 	@ROW_COUNT2 = COUNT(1) FROM WC_SALES_YA_0_DEL_F 		
	
				--Process Execution log entry -> Staging table populated

				SELECT @ETL_PROC_WID     = MAX(ETL_PROC_WID) FROM W_PARAM_G (NOLOCK)
				SET @OBJECT_TYPE = 'STORED_PROCEDURE';
				SET @PROCESS_OBJECTS = 'sp_Delete_SalesData_Zero';
				SET @ETL_PROC_WID = @ETL_PROC_WID;
				SET @getStartDate = GETDATE();
				SET @ROW_CNT1 = 0;
				SET @PROCESS_TASKS       = 'Staging table: WC_SALES_YA_0_DEL_F';
				SET @PROCESS_DESCRIPTION = 'WC_SALES_YA_0_DEL_F table has been populated with: '+CAST (@ROW_COUNT2 AS NVARCHAR (10))+' records';

				EXEC INSERT_WC_PROCESS_EXECUTION_LOG @OBJECT_TYPE        ,
											 @PROCESS_OBJECTS    ,
											 @PROCESS_TASKS      ,
											 @PROCESS_DESCRIPTION,
											 '2 : Staging table populated',
                             				 'STARTED',
                             				  @COUNTRY_CODE,
											  @ETL_PROC_WID ;

				--Sales Data Zero Deletion from Yearly Aggregate table
				SET @DEL = 'DELETE FROM '+@TARGET_TABLE+'
							WHERE EXISTS (SELECT 1 FROM WC_SALES_YA_0_DEL_F 
							WHERE WC_SALES_YA_0_DEL_F.ROW_WID = '+@TARGET_TABLE+'.ROW_WID AND 
							WC_SALES_YA_0_DEL_F.SALES_TYPE_WID = '+@TARGET_TABLE+'.SALES_TYPE_WID)'

				SET ROWCOUNT  1000000	
					EXEC sp_executesql @DEL
				   
					WHILE @@ROWCOUNT =  1000000	
						BEGIN
							EXEC sp_executesql @DEL
						END
				SET ROWCOUNT 0											  

				--Process Execution log entry -> Deletion Performed

				SELECT @ETL_PROC_WID     = MAX(ETL_PROC_WID) FROM W_PARAM_G (NOLOCK)
				SET @OBJECT_TYPE = 'STORED_PROCEDURE';
				SET @PROCESS_OBJECTS = 'sp_Delete_SalesData_Zero';
				SET @ETL_PROC_WID = @ETL_PROC_WID;
				SET @getStartDate = GETDATE();
				SET @ROW_CNT1 = 0;
				SET @PROCESS_TASKS       = 'Delete Sales Data Yearly Aggregate Aggregate table';
				SET @PROCESS_DESCRIPTION = 'DELETE '+@TARGET_TABLE+' TABLE FOR SALES_TYPE: '+ @SALES_TYPE +' AND COUNTRY_CODE: '+@COUNTRY_CODE+''; 

				EXEC INSERT_WC_PROCESS_EXECUTION_LOG @OBJECT_TYPE        ,
											 @PROCESS_OBJECTS    ,
											 @PROCESS_TASKS      ,
											 @PROCESS_DESCRIPTION,
											 '3: Perform Sales Data Zero Deletion',
                             				 'END',
                             				  @COUNTRY_CODE,
											  @ETL_PROC_WID ;
							  
FETCH NEXT FROM SALESTYPE_CURSOR INTO @COUNTRY_CODE, @SALES_TYPE

		END --END IF

END
CLOSE SALESTYPE_CURSOR
DEALLOCATE SALESTYPE_CURSOR
END

GO


